***ANSWER ALL QUESTIONS BELOW***

Why do we need data structure?
Answer: Data Structures are required to store and organize large amounts of data, so that they can be used efficiently.

What are the various operations that can be performed on different data structures?
Answer: Adding/ Inserting, Deleting/ Removing, Updating, Searching, Iterating, Merging, Appending, Sorting are some of
        the various operations that can be performed on different data structures.

When would we use data structures in the real world?
Answer: A few examples of Data Structures in real world examples are like, buying a concert ticket or purchasing a limited
        quantity item from eBay, where a Queue data structure would be implemented using the FIFO concept. Ordering a meal
        from a Burger King drive-in, Storing a set of possible moves in a chess game etc.

What is an Array?
Answer: Array is a final class in Java that can be used to declare and store a list of elements. Each element is stored
        on a particular index and once an Array is defined, the length of that Array cannot be changed.

What is the difference between Array and ArrayList?
Answer: An Array is a basic functionality defined by Java, whereas ArrayList is part of the Collections Framework in Java.
        Therefore array elements are accessed using [], while ArrayList has a set of methods to access elements and modify
        them. Array is a fixed size data structure, whereas ArrayList is an expandable or mutable type of data structure.

What is a LinkedList?
Answer: LinkedList is also a part of Collection frameworks and like ArrayList it implements the List Interface, which is
        why the LinkedList class has all the same methods as of the ArrayList class. But unlike the ArrayList, in which
        the elements are stored in a contiguous location in the memory, the LinkedList elements are given memory addresses
        randomly in the memory and are assigned pointers which point to the address of the next element in that list. Each
        element of a LinkedList, which contains a value and a pointer, is called a Node.

How is an Array different from LinkedList?
Answer: Array is a collection of elements of a similar data type, in which the values are stored in a contiguous manner
        on the memory address and the elements of an Array can be accessed using the index they are stored on. Also, once
        an Array is defined, the length of that array cannot be changed. Whereas, a LinkedList is also a collection of
        elements of a similar data type, but its elements consists of a value and a pointer which points to the address
        of the next element. A LinkedList can be expanded or reduced by adding or removing elements from the list.

What is a Queue?
Answer: Queue is an Interface in Java that extends Collection Interface. Queue is also a collection of Ordered elements,
        but it performs insert and remove operations differently. With queue, we can insert elements at the end of the
        list and remove an element from the head/ beginning of the list, hence, using the FIFO principle.

What is a Stack (not Java memory - refers to data structure)?
Answer: Stack is a class in Java that implements the List Interface, hence Stack is also an integral part of Data Structure.
        Stack is a Linear data structure that is used to store a collection of objects and uses the LIFO principle. So,
        elements can be added and removed only at the end of the list by the use of push method(for adding) and poll
        method (for removing) elements from the end of the list.

What is FIFO and LIFO?
Answer: FIFO (First-In-Last-Out) and LIFO (Last-In-First-Out), are concepts applied in Data Structures for adding and
        removing elements from a list. In the FIFO concept, the first element is processed first and the newest element
        is processed last. Whereas LIFO concept uses push and pop methods to add and remove an element. Push method adds
        an element at the top of the Stack, and the pop operation removes an element from the top of the stack.

Explain Big O Notation?
Answer: Big O is a mathematical notation that describes the limiting behaviour of a function when the argument tends toward
        a particular value or infinity. Big O is a member of a family of Notations invented by Paul Bachmann, Edmund Landau
        and others, collectively called Bachmann-Landau Notations or asymptotic notations.
        In java, however, Big O notation is the language we use for talking about how long an algorithm takes to run.
        It's how we compare the efficiency of different approaches to a problem. Big O basically refers to the runtime of
        a program.

What is the best case to search an element from an array?
Answer: The best case to search an element would be if an array is sorted.

What is the worst case to search an element from an array?
Answer: The worst case to search an element in an array is when an element is at the last position, or not in the array,
        therefore we have to traverse over the entire array giving n no of repetitions over loop.

Describe what a tree data structure is?
Answer: A tree is a hierarchical data structure (non-linear), which can represent relationships between different nodes.
        Some of the properties of a tree data structure are as follows:
        * A tree can contain no nodes or it can contain one special node called the root with zero or more subtrees.
        * Every edge of the tree is directly or indirectly originated from the root.
        * Every child has only one parent, but one parent can have many children.

Describe what a graph data structure is?
Answer: A graph is a non-linear data structure consisting of nodes and edges. The nodes in graph are also referred to as
        vertices and the edges are the lines or arcs that connect two nodes in the graph. More formally, a graph can be
        defined as: A graph consists of finite set of vertices(nodes) and sets of edges that connects a pair of nodes.

What is the difference between the HashTable and HashMap?
Answer: HashMap is non-synchronized. It is not thread-safe and can't be shared between many threads without proper
        synchronization code, whereas, Hashtable is synchronized. It is thread-safe and can be shared with many threads.
        HashMap allows only one null key and multiple null values, whereas a Hashtable doesn't allow any null key or value.
        HashMap is generally preferred over Hashtable if thread synchornization is not needed.

What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model
Answer: For RDBMS, the Array data structures are used.
        For Network data model, the Graph Data Structures are used.
        For Hierarchical data model, the Tree Data Structure is used.

How do HashMaps work in Java? How do they store values, and when are they useful?
Answer: Before talking about HashMaps, lets learn a little about "Hashing". Hashing is a term used to transform a string
        of characters into a usually shorter-fixed length value or "key", that represents the original string. Hashing is
        used to index and retrieve items in a database, because it is faster to find the item using the shorter hashed key
        than to find it using the original long string value.
        So, HashMaps work on the "Hashing" principle. Which means, HashMaps have elements which are stored in a Key-Value
        pair. The key and value could be of the same type or of different types depending on the need to access the value.
        This way HashMaps become useful to access a certain value of an element faster by using the keys to its value.

What is ArrayIndexOutOfBoundsException in java? When does it occur?
Answer: This is an Exception thrown to indicate that we are trying to access an array element with an illegal index.
        This Exception is thrown when an index is either negative, or greater than or equal to the array length.

What are the different ways of copying an array into another array?
Answer: The arrays can be copied to another array by the following methods:
        1) By iterating over one array and manually assigning the values one by one to another array.
        2) By using the clone() method, which can simply clone all the values and the size of an array to another array.
        3) By using the System.arraycopy() method. With this method we can copy from a range of the first array to the
           range of the second array. System.arraycopy() is faster than clone(), as it used Java Native Interface.
        4) By using Arrays.copyOf() method, in which we can copy the first few elements or the full array.
        5) By using the Arrays.copyOfRange() method, which is used to copy a specified range of an array. If the starting
           index is not 0, then we can use this method to copy a partial array.

What is DFS and BFS?
Answer: BFS stands for Breadth First Search. It is a "vertex" based technique for finding the shortest path in a graph.
        It uses a queue data structure which follows FIFO. In BFS, one vertex is selected at a time when it is visited and
        marked, then its adjacent are visited and stored in the queue. It is slower than DFS
        DFS stands for Depth First Search. It is a "edge" based technique for finding the shortest path in a graph. It
        uses the Stack Data Structure which follows LIFO concept. It performs two stages, first, visited vertices are
        pushed into stack and second, if there are not vertices, then visited vertices are popped (removed).

What is Recursion?
Answer: Recursion is the technique of calling a method within the same method. This technique provides a way to break
        complicated problems down into simple problems which are easier to solve. So basically, it means looping inside a
        method using the same method. In order to perform a Recursive method, it is MUST to declare a condition to break
        the loop. This is called a "Halting" condition.

What are linear and non-linear data Structures?
Answer: The Linear and non-linear data structures are the sub-classification of the data structure, which comes under the
        Non-primitive data structure (Data Structure for Non-Primitive Data types). The crucial difference between them
        is that the linear data structure arranges the data in a sequential manner or a sequence and follow some sort of
        order. Whereas, the non-linear data structure arranges the data in a hierarchical manner. Arrays, Queues, Stacks,
        LinkedList etc are forms of a linear data structures while Trees and Graphs are form of a non-linear data structure.


Outline different sorting algorithms and their time complexities:



Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
  a) In terms of Accessing elements:
  b) In terms of Inserting elements:
  c) In terms of Searching elements:
  d) In terms of Removing elements: